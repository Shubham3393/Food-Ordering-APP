{"ast":null,"code":"import { configureStore, createSlice } from '@reduxjs/toolkit';\nconst initialCartState = {\n  Items: [],\n  totalAmount: 0,\n  totalQuantity: 0\n};\nconst cartItems = createSlice({\n  name: \"cartItems\",\n  initialState: initialCartState,\n  reducers: {\n    addItemsToCart(state, action) {\n      con;\n      state.totalAmount += action.payload.item.amount * action.payload.quantity;\n      state.totalQuantity += action.payload.quantity;\n      const temp = action.payload.item;\n      const item = state.Items.find(item => item.id === temp.id);\n      if (item === undefined) {\n        temp.quantity += action.payload.quantity;\n        temp.totalAmount += action.payload.item.amount * action.payload.quantity;\n        state.Items.push(temp);\n      } else {\n        item.quantity += action.payload.quantity;\n        item.totalAmount += action.payload.item.amount * action.payload.quantity;\n      }\n    },\n    removeItemsFromCart(state, action) {\n      state.totalAmount -= action.payload.item.amount * action.payload.quantity;\n      state.totalQuantity -= action.payload.quantity;\n      const item = state.Items.find(item => item.id === action.payload.item.id);\n      if (item.quantity === 1) {\n        const temp = state.Items.filter(item => item.id !== action.payload.item.id);\n        state.Items = temp;\n      } else {\n        item.quantity -= action.payload.quantity;\n        ;\n        item.totalAmount -= action.payload.item.amount * action.payload.quantity;\n      }\n    }\n  }\n});\nexport const cartItemsActions = cartItems.actions;\nconst store = configureStore({\n  reducer: {\n    cart: cartItems.reducer\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialCartState","Items","totalAmount","totalQuantity","cartItems","name","initialState","reducers","addItemsToCart","state","action","con","payload","item","amount","quantity","temp","find","id","undefined","push","removeItemsFromCart","filter","cartItemsActions","actions","store","reducer","cart"],"sources":["F:/React/01-starting-project/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from '@reduxjs/toolkit'; \r\n\r\nconst  initialCartState ={Items: [], totalAmount : 0, totalQuantity : 0};\r\n\r\nconst cartItems = createSlice({\r\n    name: \"cartItems\",\r\n    initialState: initialCartState,\r\n    reducers:{\r\n\r\n        addItemsToCart(state, action){\r\n            con\r\n            state.totalAmount += action.payload.item.amount * action.payload.quantity;\r\n            state.totalQuantity += action.payload.quantity;\r\n            const temp = action.payload.item;\r\n\r\n            const item = state.Items.find(item => item.id===temp.id);\r\n            if(item===undefined){\r\n                temp.quantity += action.payload.quantity;\r\n                temp.totalAmount += action.payload.item.amount * action.payload.quantity;\r\n                state.Items.push(temp);\r\n            }\r\n            else {\r\n                item.quantity += action.payload.quantity;\r\n                item.totalAmount += action.payload.item.amount * action.payload.quantity;\r\n            }\r\n        },\r\n\r\n        removeItemsFromCart(state, action){\r\n            state.totalAmount -= action.payload.item.amount * action.payload.quantity;\r\n            state.totalQuantity -= action.payload.quantity;\r\n            const item = state.Items.find( item => item.id===action.payload.item.id );\r\n            if(item.quantity===1){\r\n                const temp = state.Items.filter( item => item.id!==action.payload.item.id);\r\n                state.Items = temp;\r\n            }\r\n            else {\r\n                item.quantity -= action.payload.quantity;;\r\n                item.totalAmount -= action.payload.item.amount * action.payload.quantity;\r\n            }\r\n            \r\n        }\r\n    }\r\n})\r\n\r\nexport const cartItemsActions = cartItems.actions;\r\n\r\nconst store = configureStore({\r\n    reducer: { cart: cartItems.reducer}\r\n})\r\n\r\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAOC,gBAAgB,GAAE;EAACC,KAAK,EAAE,EAAE;EAAEC,WAAW,EAAG,CAAC;EAAEC,aAAa,EAAG;AAAC,CAAC;AAExE,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC1BM,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAEN,gBAAgB;EAC9BO,QAAQ,EAAC;IAELC,cAAc,CAACC,KAAK,EAAEC,MAAM,EAAC;MACzBC,GAAG;MACHF,KAAK,CAACP,WAAW,IAAIQ,MAAM,CAACE,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGJ,MAAM,CAACE,OAAO,CAACG,QAAQ;MACzEN,KAAK,CAACN,aAAa,IAAIO,MAAM,CAACE,OAAO,CAACG,QAAQ;MAC9C,MAAMC,IAAI,GAAGN,MAAM,CAACE,OAAO,CAACC,IAAI;MAEhC,MAAMA,IAAI,GAAGJ,KAAK,CAACR,KAAK,CAACgB,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGF,IAAI,CAACE,EAAE,CAAC;MACxD,IAAGL,IAAI,KAAGM,SAAS,EAAC;QAChBH,IAAI,CAACD,QAAQ,IAAIL,MAAM,CAACE,OAAO,CAACG,QAAQ;QACxCC,IAAI,CAACd,WAAW,IAAIQ,MAAM,CAACE,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGJ,MAAM,CAACE,OAAO,CAACG,QAAQ;QACxEN,KAAK,CAACR,KAAK,CAACmB,IAAI,CAACJ,IAAI,CAAC;MAC1B,CAAC,MACI;QACDH,IAAI,CAACE,QAAQ,IAAIL,MAAM,CAACE,OAAO,CAACG,QAAQ;QACxCF,IAAI,CAACX,WAAW,IAAIQ,MAAM,CAACE,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGJ,MAAM,CAACE,OAAO,CAACG,QAAQ;MAC5E;IACJ,CAAC;IAEDM,mBAAmB,CAACZ,KAAK,EAAEC,MAAM,EAAC;MAC9BD,KAAK,CAACP,WAAW,IAAIQ,MAAM,CAACE,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGJ,MAAM,CAACE,OAAO,CAACG,QAAQ;MACzEN,KAAK,CAACN,aAAa,IAAIO,MAAM,CAACE,OAAO,CAACG,QAAQ;MAC9C,MAAMF,IAAI,GAAGJ,KAAK,CAACR,KAAK,CAACgB,IAAI,CAAEJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGR,MAAM,CAACE,OAAO,CAACC,IAAI,CAACK,EAAE,CAAE;MACzE,IAAGL,IAAI,CAACE,QAAQ,KAAG,CAAC,EAAC;QACjB,MAAMC,IAAI,GAAGP,KAAK,CAACR,KAAK,CAACqB,MAAM,CAAET,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGR,MAAM,CAACE,OAAO,CAACC,IAAI,CAACK,EAAE,CAAC;QAC1ET,KAAK,CAACR,KAAK,GAAGe,IAAI;MACtB,CAAC,MACI;QACDH,IAAI,CAACE,QAAQ,IAAIL,MAAM,CAACE,OAAO,CAACG,QAAQ;QAAC;QACzCF,IAAI,CAACX,WAAW,IAAIQ,MAAM,CAACE,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGJ,MAAM,CAACE,OAAO,CAACG,QAAQ;MAC5E;IAEJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMQ,gBAAgB,GAAGnB,SAAS,CAACoB,OAAO;AAEjD,MAAMC,KAAK,GAAG3B,cAAc,CAAC;EACzB4B,OAAO,EAAE;IAAEC,IAAI,EAAEvB,SAAS,CAACsB;EAAO;AACtC,CAAC,CAAC;AAEF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}